//
// ROM Board Tester
//
// Try to get the Flash memory Status from our custom ROM boards
//

/*
	This app uses a backdoor that we open up in a pached ROM via SWI12.
	Setting r0 to 0x0badcafe and calling SWI12 will jump to the address
	in r1 in SVC mode. r0 will now contain the return address to get back
	into USER mode and return form the SWI.

	When in SVC mode, we can manipulate the MMU tables to allow easy 
	write access to the ROM card. Also in SVC mode, we must disable 
	read and write caches while sending commands to the Flash.

	Virtual mapping at 0: 0 U C B R (0010081E) 
		03500000: 0 u c b R (00100802, P040000D4: 00000802, 00100802, etc.)
		10000000: 0 u c b RW
		Domain Mask: 0x000003E0
		Permission Mask: 0x00000C00, 11 = r/w all
 */

yButton := 10;
kFlashSector := 0x00040000;	// A sector ist 128k *2 for two Flash chips
address := 0x10800000 + kFlashSector; // Write a sector that is likely unused in page 3
data := MakeBinaryFromHex("BEEFCAFE", 'data);
dataBlock := MakeBinaryFromHex("0102030405060708DEADBEEF", 'data);

kAppName := "ROMBoardTester:WONKO";
kAppSymbol := '|ROMBoardTester:WONKO|;
kAppLabel := "ROMBoard Tester";

ARMCode := MakeBinaryFromARMFile("BoardTester.s");

newt.theForm := {
	_proto: protoFloatNGo,
	viewBounds: {
		left: 0, top: 50, right: 200, bottom: 320
	},
	penSoundEffectsOld: 1,
	ViewSetupFormScript: func() begin
		penSoundEffectsOld := GetUserConfig('penSoundEffects);
		SetUserConfig('penSoundEffects, NIL);
		// Playing a sound can possibly crash the erase and write process
		// We disable the button tap sound temporarily. Other strategies:
		// SetVolume(0);  - will this disable any sound that is played, or just make it inaudible?
		// PlaySoundIrregardless(deepclone(ROM_click));  - will this interrupt the currently playing sound in ROM and play one from RAM instead?
	end,
	ViewQuitScript: func() begin
		SetUserConfig('penSoundEffects, penSoundEffectsOld);
		inherited:?viewQuitScript();
	end,
	abc: 1,
	flash: nil,
	FlashInit:        { class: 'BinCFunction, numArgs: 1, offset: 0, code: ARMCode },
	FlashDone:        { class: 'BinCFunction, numArgs: 1, offset: 4, code: ARMCode },
	// Backdoor
	FlashRead:        { class: 'BinCFunction, numArgs: 2, offset: 12, code: ARMCode },
	FlashStatus:      { class: 'BinCFunction, numArgs: 1, offset: 16, code: ARMCode },
	// TODO: If erase fails (bit 5 = 1), write Clear Status sequence to reenable ROM
	FlashErase:       { class: 'BinCFunction, numArgs: 2, offset: 20, code: ARMCode },
	FlashWrite:       { class: 'BinCFunction, numArgs: 3, offset: 24, code: ARMCode },
	FlashWriteBlock:  { class: 'BinCFunction, numArgs: 3, offset: 28, code: ARMCode },
	FlashClearStatus: { class: 'BinCFunction, numArgs: 1, offset: 32, code: ARMCode },
	//TODO:  Blank Check, write to SectorAddress+0x555 0x33, status register bit 5 is 0 if Blank (8.5ms)
};

FlashInitButton := {
	_proto: protoTextButton,
	text: "Flash Init",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			flash := :FlashInit('FlashROM);
			Print(flash);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashInitButton);
StepDeclare(newt.theForm, FlashInitButton, 'FlashInitButton);
yButton := yButton + 18;


FlashReadButton := {
	_proto: protoTextButton,
	text: "Read Flash",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			ret := :FlashRead(flash, address);
			Print(ret);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashReadButton);
StepDeclare(newt.theForm, FlashReadButton, 'FlashReadButton);
yButton := yButton + 18;


FlashRead2Button := {
	_proto: protoTextButton,
	text: "Read Flash 2",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			ret := :FlashRead(flash, address+4);
			Print(ret);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashRead2Button);
StepDeclare(newt.theForm, FlashRead2Button, 'FlashRead2Button);
yButton := yButton + 18;


FlashWriteButton := {
	_proto: protoTextButton,
	text: "Write Flash",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			ret := :FlashWrite(flash, address, data);
			Print(ret);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashWriteButton);
StepDeclare(newt.theForm, FlashWriteButton, 'FlashWriteButton);
yButton := yButton + 18;


FlashWriteBlockButton := {
	_proto: protoTextButton,
	text: "Write Block",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			ret := :FlashWriteBlock(flash, address, dataBlock);
			Print(ret);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashWriteBlockButton);
StepDeclare(newt.theForm, FlashWriteBlockButton, 'FlashWriteBlockButton);
yButton := yButton + 18;


FlashEraseButton := {
	_proto: protoTextButton,
	text: "Erase Sector",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			// WARNING: playing sounds from ROM while erasing will crash the machine!
			ret := :FlashErase(flash, address);
			Print(ret);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashEraseButton);
StepDeclare(newt.theForm, FlashEraseButton, 'FlashEraseButton);
yButton := yButton + 18;


FlashClearStatusButton := {
	_proto: protoTextButton,
	text: "Clear Status",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			ret := :FlashClearStatus(flash);
			Print(ret);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashClearStatusButton);
StepDeclare(newt.theForm, FlashClearStatusButton, 'FlashClearStatusButton);
yButton := yButton + 18;


FlashStatusButton := {
	_proto: protoTextButton,
	text: "Flash Status",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			ret := :FlashStatus(flash);
			Print(ret);
			Print(StrHexDump(flash, 4));
			SetValue(FlashStatusText, 'text, StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashStatusButton);
StepDeclare(newt.theForm, FlashStatusButton, 'FlashStatusButton);
yButton := yButton + 18;


FlashDoneButton := {
	_proto: protoTextButton,
	text: "Flash Done",
	viewBounds: RelBounds(10, yButton, 80, 12),
	ButtonClickScript: func() begin
			:FlashDone(flash);
			Print("Flash Done:");
			Print(StrHexDump(flash, 4));
		end,
};
AddStepForm(newt.theForm, FlashDoneButton);
StepDeclare(newt.theForm, FlashDoneButton, 'FlashDoneButton);
yButton := yButton + 18;


FlashStatusText := {
	viewBounds: RelBounds(10, yButton, 180, 200-yButton),
	viewClass: clParagraphView,
	viewJustify: 0,
	viewFlags: vVisible,
	viewFont: ROM_fontsystem9bold,
	text: "Flash Status output",
};
AddStepForm(newt.theForm, FlashStatusText);
StepDeclare(newt.theForm, FlashStatusText, 'FlashStatusText);

