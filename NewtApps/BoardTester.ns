//
// ROM Board Tester
//
// Try to get the Flash memory Status from our custom ROM boards
//

/*
	This app uses a backdoor that we open up in a pached ROM via SWI12.
	Setting r0 to 0x0badcafe and calling SWI12 will jump to the address
	in r1 in SVC mode. r0 will now contain the return address to get back
	into USER mode and return form the SWI.

	When in SVC mode, we can manipulate the MMU tables to allow easy 
	write access to the ROM card. Also in SVC mode, we must disable 
	read and write caches while sending commands to the Flash.

	Virtual mapping at 0: 0 U C B R (0010081E) 
		03500000: 0 u c b R (00100802, P040000D4: 00000802, 00100802, etc.)
		10000000: 0 u c b RW
		Domain Mask: 0x000003E0
		Permission Mask: 0x00000C00, 11 = r/w all
 */

kAppName := "ROMBoardTester:WONKO";
kAppSymbol := '|ROMBoardTester:WONKO|;
kAppLabel := "ROMBoard Tester";

newt.theForm := {
	_proto: protoFloatNGo,
	viewBounds: {
		left: 0, top: 50, right: 200, bottom: 120
	}	
};

Test1Button := {
	_proto: protoTextButton,
	text: "Test 1",
	viewBounds: RelBounds(10, 10, 60, 16)
};
AddStepForm(newt.theForm, Test1Button);
StepDeclare(newt.theForm, Test1Button, 'Test1Button);



Test1Result := {
	_proto: protoStaticText,
	nativeMath: {
		class : 'BinCFunction,
		numArgs: 2,
		offset: 0,
		code: MakeBinaryFromARM("
			@.word 0xE1200070
			ldr r0, =0x0badcafe
			mov r2, #0
			add r1, pc, #8
			swi 12					@ enter SVC mode
			mov r0, r2, lsl #2		@ convert the result into an integer object
			mov pc, lr				@ return to the interpreter

		svc_call:

			@.word 0xE1200070
			stmdb sp!, {r0, lr}		@ save return address in r0

			adr r0, runPhys			@ jump to this address in physical RAM
			mov lr, pc
			ldr pc, =0x0015BCC8		@ VtoP

			ldr r1, =0x00001554
			ldr r2, =0x00700070
			mov r3, #0

			adr r4, returnPhys
			mov lr, r0				@ return to the ohysical address			
			ldr r0, =0x000011B0		@ disable I, D, and W cache, and MMU
			ldr pc, =0x007FF004		@ call 'write to control register'

			@ this code is executed in physical space
		runPhys:
			str r2, [r1]
			ldr r2, [r3]

			mov lr, r4
			ldr r0, =0x000011BD		@ enable I, D, and W cache, and MMU
			ldr pc, =0x007FF004		@ call 'write to control register'

		returnPhys:
			ldmia sp!, {r0, lr}
			mov pc, r0
			")
	},
	newtonScriptMath: func(a, b) begin
		return a+b;
	end,
	ViewSetupFormScript: func() begin
		SetValue(self, 'text, NumberStr( self:nativeMath(4, 8) ) );
	end,
	text: "Result",
	viewBounds: RelBounds(75, 12, 60, 10)
};
AddStepForm(newt.theForm, Test1Result);
StepDeclare(newt.theForm, Test1Result, 'Test1Result);

